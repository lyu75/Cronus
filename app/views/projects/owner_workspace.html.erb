<div class="container">
  <h2><%= @project.name %></h2>

  <div>
    <% @project.scenes.each do |s| %>

      <div class='scene'>
          <p><%= s.summary %></p>
      </div>

    <% end %>
  </div>


<script type="text/javascript" id="code">
   function init() {
      if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
      var $ = go.GraphObject.make;  // for conciseness in defining templates
      // some constants that will be reused within templates
      var roundedRectangleParams = {
        parameter1: 2,  // set the rounded corner
        spot1: go.Spot.TopLeft, spot2: go.Spot.BottomRight  // make content go all the way to inside edges of rounded corners
      };
      myDiagram =
        $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
          {
            "animationManager.initialAnimationStyle": go.AnimationManager.None,
            "InitialAnimationStarting": function(e) {
                var animation = e.subject.defaultAnimation;
                animation.easing = go.Animation.EaseOutExpo;
                animation.duration = 900;
                animation.add(e.diagram, 'scale', 0.1, 1);
                animation.add(e.diagram, 'opacity', 0, 1);
            },
            // have mouse wheel events zoom in and out instead of scroll up and down
            "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
            // support double-click in background creating a new node
            "clickCreatingTool.archetypeNodeData": { text: "new node" },
            // enable undo & redo
            "undoManager.isEnabled": true,
            positionComputation: function (diagram, pt) {
              return new go.Point(Math.floor(pt.x), Math.floor(pt.y));
            }
          });
      // when the document is modified, add a "*" to the title and enable the "Save" button
      myDiagram.addDiagramListener("Modified", function (e) {
        var button = document.getElementById("SaveButton");
        if (button) button.disabled = !myDiagram.isModified;
        var idx = document.title.indexOf("*");
        if (myDiagram.isModified) {
          if (idx < 0) document.title += "*";
        } else {
          if (idx >= 0) document.title = document.title.substr(0, idx);
        }
      });
      // define the Node template
      myDiagram.nodeTemplate =
        $(go.Node, "Auto",
          {
            locationSpot: go.Spot.TopCenter,
            isShadowed: true, shadowBlur: 1,
            shadowOffset: new go.Point(0, 1),
            shadowColor: "rgba(0, 0, 0, .14)"
          },
          new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
          // define the node's outer shape, which will surround the TextBlock
          $(go.Shape, "RoundedRectangle", roundedRectangleParams,
            {
              name: "SHAPE", fill: "#ffffff", strokeWidth: 0,
              stroke: null,
              portId: "",  // this Shape is the Node's port, not the whole Node
              fromLinkable: true, fromLinkableSelfNode: true, fromLinkableDuplicates: true,
              toLinkable: true, toLinkableSelfNode: true, toLinkableDuplicates: true,
              cursor: "pointer"
            }),
          $(go.TextBlock,
            {
              font: "bold small-caps 11pt helvetica, bold arial, sans-serif", margin: 7, stroke: "rgba(0, 0, 0, .87)",
              editable: true  // editing the text automatically updates the model data
            },
            new go.Binding("text").makeTwoWay())
        );
      // unlike the normal selection Adornment, this one includes a Button
      myDiagram.nodeTemplate.selectionAdornmentTemplate =
        $(go.Adornment, "Spot",
          $(go.Panel, "Auto",
            $(go.Shape, "RoundedRectangle", roundedRectangleParams,
            { fill: null, stroke: "#7986cb", strokeWidth: 3 }),
            $(go.Placeholder)  // a Placeholder sizes itself to the selected Node
          ),
          // the button to create a "next" node, at the top-right corner
          $("Button",
            {
              alignment: go.Spot.TopRight,
              click: addNodeAndLink  // this function is defined below
            },
            $(go.Shape, "PlusLine", { width: 6, height: 6 })
          ) // end button
        ); // end Adornment
      myDiagram.nodeTemplateMap.add("Start",
        $(go.Node, "Spot", { desiredSize: new go.Size(75, 75) },
          new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
          $(go.Shape, "Circle",
            {
              fill: "#52ce60", /* green */
              stroke: null,
              portId: "",
              fromLinkable: true, fromLinkableSelfNode: true, fromLinkableDuplicates: true,
              toLinkable: true, toLinkableSelfNode: true, toLinkableDuplicates: true,
              cursor: "pointer"
            }),
          $(go.TextBlock, "Start",
            {
              font: "bold 16pt helvetica, bold arial, sans-serif",
              stroke: "whitesmoke"
            })
        )
      );
      myDiagram.nodeTemplateMap.add("End",
        $(go.Node, "Spot", { desiredSize: new go.Size(75, 75) },
          new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
          $(go.Shape, "Circle",
            {
              fill: "maroon",
              stroke: null,
              portId: "",
              fromLinkable: true, fromLinkableSelfNode: true, fromLinkableDuplicates: true,
              toLinkable: true, toLinkableSelfNode: true, toLinkableDuplicates: true,
              cursor: "pointer"
            }),
          $(go.Shape, "Circle", { fill: null, desiredSize: new go.Size(65, 65), strokeWidth: 2, stroke: "whitesmoke" }),
          $(go.TextBlock, "End",
            {
              font: "bold 16pt helvetica, bold arial, sans-serif",
              stroke: "whitesmoke"
            })
        )
      );

      // clicking the button inserts a new node to the right of the selected node,
      // and adds a link to that new node
      function addNodeAndLink(e, obj) {
        var adornment = obj.part;
        var diagram = e.diagram;
        diagram.startTransaction("Add State");
        // get the node data for which the user clicked the button
        var fromNode = adornment.adornedPart;
        var fromData = fromNode.data;
        // create a new "State" data object, positioned off to the right of the adorned Node
        var toData = { text: "new" };
        var p = fromNode.location.copy();
        p.x += 200;
        toData.loc = go.Point.stringify(p);  // the "loc" property is a string, not a Point object
        // add the new node data to the model
        var model = diagram.model;
        model.addNodeData(toData);
        // create a link data from the old node data to the new node data
        var linkdata = {
          from: model.getKeyForNodeData(fromData),  // or just: fromData.id
          to: model.getKeyForNodeData(toData),
          text: "transition"
        };
        // and add the link data to the model
        model.addLinkData(linkdata);
        // select the new Node
        var newnode = diagram.findNodeForData(toData);
        diagram.select(newnode);
        diagram.commitTransaction("Add State");
        // if the new node is off-screen, scroll the diagram to show the new node
        diagram.scrollToRect(newnode.actualBounds);
      }
      // replace the default Link template in the linkTemplateMap
      myDiagram.linkTemplate =
        $(go.Link,  // the whole link panel
          {
            curve: go.Link.Bezier,
            adjusting: go.Link.Stretch,
            reshapable: true, relinkableFrom: true, relinkableTo: true,
            toShortLength: 3
          },
          new go.Binding("points").makeTwoWay(),
          new go.Binding("curviness"),
          $(go.Shape,  // the link shape
            { strokeWidth: 1.5 },
            new go.Binding('stroke', 'progress', function(progress) {
              return progress ? "#52ce60" /* green */ : 'black';
            }),
            new go.Binding('strokeWidth', 'progress', function(progress) {
              return progress ? 2.5 : 1.5;
            })
            ),
          $(go.Shape,  // the arrowhead
            { toArrow: "standard", stroke: null },
            new go.Binding('fill', 'progress', function(progress) {
              return progress ? "#52ce60" /* green */ : 'black';
            }),
            ),
          $(go.Panel, "Auto",
            $(go.Shape,  // the label background, which becomes transparent around the edges
              {
                fill: $(go.Brush, "Radial",
                  { 0: "rgb(245, 245, 245)", 0.7: "rgb(245, 245, 245)", 1: "rgba(245, 245, 245, 0)" }),
                stroke: null
              }),
            $(go.TextBlock, "transition",  // the label text
              {
                textAlign: "center",
                font: "9pt helvetica, arial, sans-serif",
                margin: 4,
                editable: true  // enable in-place editing
              },
              // editing the text automatically updates the model data
              new go.Binding("text").makeTwoWay())
          )
        );
      // read in the JSON data from the "mySavedModel" element
      load();
    }

    // delete a scene
    function deleteScene(projectId, scene_id){
      $.ajax({
        type: "DELETE",
        url:"/projects/"+projectId+"/scenes/"+scene_id,
        success: function(data, textStatus, jqXHR){
          console.log("eihei!");
        },
        error: function(jqXHR, textStatus, errorThrown){
          console.log("faaaaaaa");
        }
      });
    }

    // send a post request to add a scene; scene needs to be a hash
    function addScene(projectId, scene){
      $.ajax({
        type: "POST",
        url:"/projects/"+projectId+"/scenes",
        data: scene,
        success: function(data, textStatus, jqXHR){
          console.log("eihei!");
        },
        error: function(jqXHR, textStatus, errorThrown){
          console.log("faaaaaaa");
        }
      });
    }

    function editScene(projectId, scene_id, scene){
      $.ajax({
        type: "PATCH",
        url:"/projects/"+projectId+"/scenes/"+scene_id,
        data: scene,
        success: function(data, textStatus, jqXHR){
          console.log("eihei!");
        },
        error: function(jqXHR, textStatus, errorThrown){
          console.log("faaaaaaa");
        }
      });
    }


    // Show the diagram's model in JSON format
    function save() {
      document.getElementById("mySavedModel").value = myDiagram.model.toJson();
      var nodes = myDiagram.model.Cc;
      var edges = myDiagram.model.Nc;
      var projectId = <%= @project.id %>;

      /*
        get all scenes from the current project

        rememebr:
          "<%= @project.scenes %>"
          no double quotes if using raw
      */

      // make a get request to fetch all the scenes:
      $.ajax({
        type: "GET",
        url:"/projects/"+projectId+"/scenes",
        dataType: "json",
        success: function(data, textStatus, jqXHR){
          let oldScenes = data;
          console.log("old scenes", oldScenes);
          console.log("nodes in the editor", nodes);

          // check if we need to make any delete request
          for(var i=0;i<oldScenes.length;i++){
            // console.log(oldScenes[i].editor_id);
            var del = true;
            // check if the old node is still present in the editor
            for(var j=0;j<nodes.length;j++){
              if(nodes[j].id == oldScenes[i].editor_id){
                del = false;
              }
            }
            if (del){
              deleteScene(projectId, oldScenes[i].id);
            }
          }


          // node information
          for(var i=0;i<nodes.length;i++){
            var node = nodes[i];
            // find matching scene
            var matchingScene = null;
            for(var j=0;j<oldScenes.length;j++){
              oldScene = oldScenes[j];
              if (oldScene.editor_id == node.id){
                matchingScene = oldScene;
              }
            }

            // build hash for scene
            var text = node.text;
            var editor_id = node.id;
            var p = node.loc.split(" ");
            var p1 = Math.round(parseFloat(p[0]));
            var p2 = Math.round(parseFloat(p[1]));
            // console.log("text", nodes[i].text);
            // console.log("id", nodes[i].id);
            // console.log("p1", nodes[i].loc.split(" ")[0]);
            // console.log("p2", nodes[i].loc.split(" ")[1]);

            var scene = {
              scene:{
                summary: text,
                editor_id: editor_id,
                p1: p1,
                p2: p2
              }
            };

            // if no mathcing scene, make a post request
            // otherwise, a patch request

            if (matchingScene == null){
              // don't add the start node
              if (scene.scene.editor_id != -1){
                addScene(projectId, scene);
              }
            }else{
              // before making a patch request, check if it is necessary
              var oldSummary = matchingScene.summary;
              var oldP1 = matchingScene.p1;
              var oldP2 = matchingScene.p2;
              var sceneId = matchingScene.id;
              if(oldSummary==text && oldP1==p1 && oldP2==p2){
                // do nothing
              }else{
                editScene(projectId, sceneId, scene);
              }
            }
          }


          // display edge information:
          // for(var i=0;i<edges.length;i++){
          //   console.log(edges[i].from);
          //   console.log(edges[i].to);
          //   var points = edges[i].points.j;
          //   console.log(points[0].x);
          //   console.log(points[0].y);
          //   console.log(points[1].x);
          //   console.log(points[1].y);
          //   console.log(points[2].x);
          //   console.log(points[2].y);
          //   console.log(points[3].x);
          //   console.log(points[3].y);
          // }
        },
        error: function(jqXHR, textStatus, errorThrown){
          console.log("faaaaaaa");
        }
      });



    }

    function load() {
      var projectId = <%= @project.id %>;
      $.ajax({
        type: "GET",
        url:"/projects/"+projectId+"/scenes",
        dataType: "json",
        success: function(data, textStatus, jqXHR){
          let oldScenes = data;
          // modify the array for displaying
          let nodes = [];
          for (let i=0;i<oldScenes.length;i++){
            // console.log(oldScenes[i]);
            let scene = oldScenes[i];
            let node = {
              "id": scene.editor_id,
              "loc": scene.p1+" "+scene.p2,
              "text": scene.summary
            };
            nodes.push(node);
          }
          // add the start node
          let start = {"id":-1, "loc":"155 -138", "category":"Start"};
          nodes.push(start);
          // console.log(nodes);

          let model = {
            "class": "GraphLinksModel",
            "nodeKeyProperty": "id",
            "nodeDataArray": nodes
            // "linkDataArray": [
            //   {"from":-1, "to":0, "text":"Visit online store", "points":[200.9629729076036,-63.96743795509042,207.28009415140457,-36.69798710088425,206.78172806502616,-10.695691829847046,196.16932689972282,15]},
            //   {"from":0, "to":1, "progress":"true", "text":"Browse", "points":[225.5003662109375,24.202827496236104,250.51320982583232,20.16213461569489,273.86634398110573,22.59773756440466,304.43478304115314,32]}
          // ]
          };

          myDiagram.model = go.Model.fromJson(model);

        },
        error: function(jqXHR, textStatus, errorThrown){
          console.log("faaaaaaa");
        }
      });
    }

</script>

<div id="sample">
   <div id="myDiagramDiv" style="margin-top:15px;border: none; border-radius: 10px; width: 100%; height: 600px; background: #d7c8af"></div>

    <div>
      <button id="SaveButton" onclick="save()">Save</button>
      <button onclick="load()">Load</button>
        Diagram Model saved in JSON format.
    </div>

    <textarea id="mySavedModel" style="width:100%;height:300px">
{ "class": "GraphLinksModel",
  "nodeKeyProperty": "id",
  "nodeDataArray": [
{"id":-1, "loc":"155 -138", "category":"Start"},
{"id":0, "loc":"190 15", "text":"Lu Miao"},
{"id":1, "loc":"353 32", "text":"Browse Items"}
 ],
  "linkDataArray": [
{"from":-1, "to":0, "text":"Visit online store", "points":[200.9629729076036,-63.96743795509042,207.28009415140457,-36.69798710088425,206.78172806502616,-10.695691829847046,196.16932689972282,15]},
{"from":0, "to":1, "progress":"true", "text":"Browse", "points":[225.5003662109375,24.202827496236104,250.51320982583232,20.16213461569489,273.86634398110573,22.59773756440466,304.43478304115314,32]}
 ]}
  </textarea>
</div>
</div>
